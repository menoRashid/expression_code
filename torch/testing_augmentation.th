require 'image'
npy4th = require 'npy4th'
require 'data_face';
require 'cunn'
require 'cudnn'
require 'nn';
require 'optim'
require 'torchx';
require 'gnuplot';
dump=require 'dump';
visualize=require 'visualize';

function processIm(img_face,rand)
		
        
        -- self.start_idx_face=1;
        local input_size={96,96};
        local angles={-5,5};
        local pixel_augment={0.5,1.5};
        local scale={0.7,1.4};

        -- local translate={-10,10};
        local a_range = {0.25,4}
        local b_range = {0.7,1.4};
        local c_range = {-0.1,0.1};

        
--         a. Flip: The image is horizontally mirrored with probability 0.5.
-- b. Rotation: A random theta is sampled uniformly from the range [-5, 5] degrees and the image is rotated by theta.
-- c. Scale: A random alpha is sampled uniformly from the range [0.7, 1.4] and the image is scaled by alpha.
-- d. Translation: A random [x, y] vector is sampled and the image is translated by [x, y]. x and y are defined such that:
-- x ~ Uniform(-delta/2, delta/2)
-- y ~ Uniform(-delta/2, delta/2)
-- where delta = (alpha-1)*96.
-- e. Intensity Change: The pixels of an image (p(i, j)) are changed using the following formula: 
-- p*(i, j) = (p(i, j)^a) * b + c 
-- where a, b, and c are defined as:
-- a ~ Uniform(0.25, 4)
-- b ~ Uniform(0.7, 1.4)
-- c ~ Uniform(-0.1, 0.1)

        -- local rand=math.random(2);
        if rand==1 then
            image.hflip(img_face,img_face);
        end

        
        -- rand=math.random(2);
        -- if rand==2 then
        	local angle_deg = (math.random()*(angles[2]-angles[1]))+angles[1]
			local angle=math.rad(angle_deg)
			img_face=image.rotate(img_face,angle,"bilinear");
			print (angle_deg);
		-- end

		-- rand=math.random(2);
		-- if rand==3 then
			-- scale
			local alpha = (math.random()*(scale[2]-scale[1]))+scale[1]
			local img_face_sc=image.scale(img_face,'*'..alpha);
			if alpha<1 then
				local pos=math.floor((img_face:size(2)-img_face_sc:size(2))/2)+1
				img_face=torch.zeros(img_face:size());
				img_face[{{},{pos,pos+img_face_sc:size(2)-1},{pos,pos+img_face_sc:size(2)-1}}]=img_face_sc;
			else
				local pos=math.floor((img_face_sc:size(2)-img_face:size(2))/2)+1
				img_face=torch.zeros(img_face:size());
				img_face=img_face_sc[{1,{pos,pos+img_face:size(2)-1},{pos,pos+img_face:size(2)-1}}];
				
			end
			print (alpha,img_face_sc:size(2));
		-- end

		-- local alpha=(math.random()*(scale[2]-scale[1]))+scale[1];
		
		-- if rand==4 then
			-- translate
			local delta = math.floor(torch.abs(alpha-1)*input_size[1]);
			local x_translate=math.random(-delta,delta)
			local y_translate=math.random(-delta,delta)
			img_face = image.translate(img_face, x_translate, y_translate);
			print (alpha,delta,x_translate,y_translate);
		-- end
		
		-- rand=math.random(2);
		

		-- rand=math.random(2);
		-- if rand==5 then
			local a=(math.random()*(a_range[2]-a_range[1]))+a_range[1];

			local b=(math.random()*(b_range[2]-b_range[1]))+b_range[1];
			local c=(math.random()*(c_range[2]-c_range[1]))+c_range[1];

			img_face = (torch.pow(img_face,a)*b) +c
			print (a,b,c);
			-- img_face=img_face*pixel_augment_curr;
		-- end

		img_face:mul(255);
        return img_face
end

function main()
	local img_path='../data/ck_96/im/S010/002/S010_002_00000001.png';
	local out_dir='../scratch/test_augmentation';
	local img=image.load(img_path);
	local in_img_path=paths.concat(out_dir,'0.png');
	math.randomseed(os.time())
	image.save(in_img_path,img);
	for i=1,5 do
		print (i);
		local img_new=processIm(img:clone(),i);
		img_new:div(255);
		local out_img_path=paths.concat(out_dir,i..'.png');
		image.save(out_img_path,img_new);
	end

end


main();